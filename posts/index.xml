<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Cheney&#39;s blog</title>
    <link>https://cheneydev.github.io/posts/</link>
    <description>Recent content in Posts on Cheney&#39;s blog</description>
    <image>
      <title>Cheney&#39;s blog</title>
      <url>https://cheneydev.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://cheneydev.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 22 Oct 2023 22:28:22 +0800</lastBuildDate><atom:link href="https://cheneydev.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>设计模式面试笔记</title>
      <link>https://cheneydev.github.io/posts/2023-10-21-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 22 Oct 2023 22:28:22 +0800</pubDate>
      
      <guid>https://cheneydev.github.io/posts/2023-10-21-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/</guid>
      <description>七大原则 类别 原则名称 描述 创建类 单一职责原则 (Single Responsibility Principle ) 一个类应该只有一个引起变化的原因，即一个类应该只有一个单一的责任。 开放封闭原则 (Open/Closed Principle) 软件实体应该是开放于扩展的，但封闭于修改的，可以通过添加新功能来扩展系统，而不需要修改已存在的代码。 类关系 里氏替换原则 (Liskov Substitution Principle ) 子类必须能够替换其基类而不引起不良的行为，子类应该保持对基类的兼容性，不应该破坏父类的预期行为。 依赖倒置原则 (Dependency Inversion Principle) 高层模块不应该依赖于低层模块，二者都应该依赖于抽象/接口，抽象/接口不应该依赖于具体细节，具体细节应该依赖于抽象/接口。 接口隔离原则 (Interface Segregation Principle ) 客户端不应该被迫依赖于它们不使用的接口，接口应该被细分，使得客户端只需知道与其相关的接口。 组件复用 迪米特法则 (Law of Demeter) 每个单元应该只与其紧密相关的少数其他单元进行交互，减少模块之间的耦合性，使系统更加灵活和易于维护。 合成/聚合复用原则 (Composite/Aggregate Reuse Principle) 尽量使用合成/聚合关系来实现代码重用，而不是继承，降低类之间的耦合性，使系统更灵活。 </description>
    </item>
    
    <item>
      <title>Java 面试笔记</title>
      <link>https://cheneydev.github.io/posts/2023-10-14-java-%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 14 Oct 2023 10:38:40 +0800</pubDate>
      
      <guid>https://cheneydev.github.io/posts/2023-10-14-java-%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/</guid>
      <description>基础知识 面向对象三大特征 特征 描述 封装 (Encapsulation) 数据和操作方法封装在单元内，限制外部访问，确保数据安全性。 继承 (Inheritance) 子类可以基于父类的属性和方法扩展其它属性和方法，促进代码重用和扩展性。 多态 (Polymorphism) 不同对象对同一消息有不同响应，提高灵活性和可维护性。 abstract 和 interface 抽象类（abstract class）是一种类，可以包含抽象方法和具体方法，支持单一继承，而接口（interface）是一种纯抽象类型，只包含抽象方法，支持多重继承。
特点 抽象类 接口 类型 类 接口（纯抽象类型） 方法 可包含抽象方法和具体方法 只包含抽象方法，没有具体方法 字段 可包含字段 不包含字段 继承和实现 可以继承一个抽象类 类可以实现多个接口 多重继承 不支持多重继承 类可以同时实现多个接口 实例化 不能实例化 不能实例化 访问修饰符 可以使用各种访问修饰符（public、protected、private等） 方法默认为public和abstract 方法覆盖（重写） 子类必须覆盖抽象方法，除非子类也是抽象类 实现类必须提供接口中定义的所有方法的具体实现 用途 构建类层次结构，提供通用实现和规范 定义契约，实现多态，允许类共享通用方法 多线程 进程（Process）和线程（Thread） 特点 进程 线程 定义 独立的程序实例 进程内的执行单元 资源消耗 需要独立内存和系统资源，开销大 共享内存和资源，开销小 通信和同步 通信需要使用IPC机制，同步较复杂 直接共享内存，同步相对容易 安全性 进程崩溃不影响其他进程，较安全 一个线程的错误可能影响整个进程的稳定性 创建和销毁 创建和销毁进程较慢复杂 创建和销毁线程较快简单 并行性 进程可以在多处理器上并行执行 线程在多核处理器上并行执行更容易 </description>
    </item>
    
    <item>
      <title>MySQL 面试笔记</title>
      <link>https://cheneydev.github.io/posts/2023-10-14-mysql-%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 14 Oct 2023 10:15:02 +0800</pubDate>
      
      <guid>https://cheneydev.github.io/posts/2023-10-14-mysql-%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/</guid>
      <description>事务 什么是事务 事务就是一组SQL语句，作为一个工作单元以原子方式进行处理。要么全部执行成功，要么全部执行失败。
事务四大特性 ACID 原子性（atomicity）
一个事务必须被视为一个不可分割的工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚。
一致性（consistency）
数据库总是从一个一致性状态转换到下一个一致性状态。如果事务最终没有提交，该事务所做的任何修改都不会被保存到数据库中。
隔离性（isolation）
一个事务所做的修改在最终提交以前，对其他事务是不可见的。
持久性（durability）
一旦提交，事务所做的修改就会被永久保存到数据库中。此时即使系统崩溃，数据也不会丢失。
事务的四个隔离级别 READ UNCOMMITTED（未提交读）
在事务中可以查看其他事务中还没有提交的修改。
READ COMMITTED（提交读）
大多数数据库系统的默认隔离级别是READ COMMITTED（但MySQL不是）。一个事务可以看到其他事务在它开始之后提交的修改，但在该事务提交之前，其所做的任何修改对其他事务都是不可见的。这个级别仍然允许不可重复读（nonrepeatable read），这意味着同一事务中两次执行相同语句，可能会看到不同的数据结果。
REPEATABLE READ（可重复读）
MySQL 的默认隔离级别，REPEATABLE READ解决了READ COMMITTED[7]级别的不可重复读问题，保证了在同一个事务中多次读取相同行数据的结果是一样的。但是理论上，可重复读隔离级别还是无法解决另外一个幻读（phantom read）的问题。
SERIALIZABLE（串行化）
该级别通过强制事务按序执行，使不同事务之间不可能产生冲突，从而解决了前面说的幻读问题。
死锁 死锁是指两个或多个事务相互持有和请求相同资源上的锁，产生了循环依赖。当多个事务试图以不同的顺序锁定资源时会导致死锁。当多个事务锁定相同的资源时，也可能会发生死锁。</description>
    </item>
    
    <item>
      <title>在 Spring Boot 项目的配置文件中安全存放敏感信息（密码）</title>
      <link>https://cheneydev.github.io/posts/2023-06-01-%E5%9C%A8springboot%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E5%AE%89%E5%85%A8%E5%AD%98%E6%94%BE%E5%AF%86%E7%A0%81/</link>
      <pubDate>Thu, 01 Jun 2023 10:50:08 +0800</pubDate>
      
      <guid>https://cheneydev.github.io/posts/2023-06-01-%E5%9C%A8springboot%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E5%AE%89%E5%85%A8%E5%AD%98%E6%94%BE%E5%AF%86%E7%A0%81/</guid>
      <description>实现在 Spring Boot 项目中安全地存储敏感信息，可以使用外部配置文件而不是将敏感信息明文存储在 application.yml 文件中。这样可以避免敏感信息被 Git 提交到网络上。
操作方法：
在 .gitignore 文件中添加 **/credentials.properties 来让版本控制工具忽略这个文件。
在 resources 文件夹下创建 credentials.properties，用来存储密码等敏感信息。
将敏感信息添加到credentials.properties文件中。例如：
password=your_password_here 在配置类上使用 @PropertySource 注解，指定加载刚才的文件。这样可以把文件的内容加载到 Spring Context 中。
在配置文件中使用（以配置 MySQL 数据源为例）：
spring: datasource: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://${mysql-host}:${mysql-port}/${mysql-database}?useSSL=false&amp;amp;serverTimezone=Asia/Shanghai&amp;amp;allowPublicKeyRetrieval=true username: ${mysql-username} password: ${mysql-password} </description>
    </item>
    
    <item>
      <title>如何使用 AI 孙燕姿歌手模型</title>
      <link>https://cheneydev.github.io/posts/2023-05-30-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8ai%E5%AD%99%E7%87%95%E5%A7%BF%E6%AD%8C%E6%89%8B%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Tue, 30 May 2023 21:40:40 +0800</pubDate>
      
      <guid>https://cheneydev.github.io/posts/2023-05-30-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8ai%E5%AD%99%E7%87%95%E5%A7%BF%E6%AD%8C%E6%89%8B%E6%A8%A1%E5%9E%8B/</guid>
      <description>实现 AI 孙燕姿主要借助 so-vits-svc 和别人基于此项目训练出来的孙燕姿声音模型。
项目中提供了 Colab 版本的代码，所以这里介绍如何在 Colab 中运行此项目并导入孙燕姿声音模型。
初始化模型 将 Colab 文件保存到自己的 Google Drive ，依次运行各个 Cell ，在 (Optional) Other Downloads (.zip) Step o.1 这一步导入孙燕姿模型。首先将下载好的孙燕姿模型上传到自己的 Google Drive （这里不提供链接），右键获取该文件的分享链接（所有人可见），输入到 Cell 的 model_url 里。然后运行下一个 Cell ，注意下一个 Cell 下面的重启运行时环境的提示，需要手动重启运行时环境，重启后不需要从头开始执行，接着运行下面的 Cell 即可。
处理音频文件 我们需要将目标歌曲的伴奏和人声分离，我使用的是 vocalremover.org 这个网站，将分离后的伴奏和人声分别下载保存。
注意，由于性能限制，我们需要把人声音频切分成 1 分钟左右的片段来交给模型处理，然后将输出音频合并成完整的歌曲人声部分。
人声文件是我们需要丢给模型处理的文件，当模型把人声替换成孙燕姿的声音之后，我们将它下载下来并与刚才的伴奏合并（我使用的是剪映在线版）。
生成孙燕姿音色歌曲 在 Colab 的文件目录中找到 raw 文件夹，将人声文件放进去。
点击运行下一个 Cell ，运行完毕后会出来如下表单：
参数这里建议像图里那样填写。
然后点击 convert 等待完成。
输出结果在 outputs 文件夹下，点击下载即可。</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://cheneydev.github.io/posts/hello-world/</link>
      <pubDate>Thu, 25 May 2023 10:49:08 +0800</pubDate>
      
      <guid>https://cheneydev.github.io/posts/hello-world/</guid>
      <description>Hello World!</description>
    </item>
    
  </channel>
</rss>
