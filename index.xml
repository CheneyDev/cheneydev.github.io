<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Cheney&#39;s blog</title>
    <link>https://cheneydev.github.io/</link>
    <description>Recent content on Cheney&#39;s blog</description>
    <image>
      <title>Cheney&#39;s blog</title>
      <url>https://cheneydev.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://cheneydev.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Mar 2024 20:21:08 +0800</lastBuildDate><atom:link href="https://cheneydev.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>网盘间文件互传方案</title>
      <link>https://cheneydev.github.io/posts/2024-03-22-%E7%BD%91%E7%9B%98%E9%97%B4%E6%96%87%E4%BB%B6%E4%BA%92%E4%BC%A0%E6%96%B9%E6%A1%88/2024-03-22-%E7%BD%91%E7%9B%98%E9%97%B4%E6%96%87%E4%BB%B6%E4%BA%92%E4%BC%A0%E6%96%B9/</link>
      <pubDate>Fri, 22 Mar 2024 20:21:08 +0800</pubDate>
      
      <guid>https://cheneydev.github.io/posts/2024-03-22-%E7%BD%91%E7%9B%98%E9%97%B4%E6%96%87%E4%BB%B6%E4%BA%92%E4%BC%A0%E6%96%B9%E6%A1%88/2024-03-22-%E7%BD%91%E7%9B%98%E9%97%B4%E6%96%87%E4%BB%B6%E4%BA%92%E4%BC%A0%E6%96%B9/</guid>
      <description>事情起因 最近发现 PikPak 网盘的离线下载功能很好用，能把死链的资源下载下来，而且网盘的容量也很大，所以打算用来当资源备份盘。
有时候会遇到一些挂载到 Alist 的资源，这些资源无法通过获取直链的方式导入到 PikPak 的离线下载里（从 Alist 获取到的下载链接无法被 PikPak 成功下载）；
还有一个问题是当资源文件很多时，无法批量获取链接（页面右下角有多选和获取下载链接按钮）。
要解决的问题 Alist 文件快速转存到 PikPak
网盘间的文件互传
解决方案 Alist 有一个“离线下载”功能，这个功能通过 Aria2 把文件下载到服务器，再上传到网盘后删除。前面遇到的问题是通过 Alist 获取到的文件下载链接在 PikPak 中是无法使用的，但在这里是可以的，这就实现了把文件转存到 PikPak 的目标。
因此需要自己在服务器上搭建 Alist ，然后挂载 PikPak 网盘，再通过 Alist 的离线下载功能来转存别人的 Alist 文件。
搭建步骤如下：（其它安装方式参见：https://alist.nn.ci/zh/guide/install ）
执行下面命令通过 Docker 安装 Alist ，这个 Image 包含了 Aria2 （Alist 和 Aria 必须在同一个 Docker 容器里）
docker run -d --restart=always -v /etc/alist:/opt/alist/data -p 5244:5244 -e PUID=0 -e PGID=0 -e UMASK=022 --name=&amp;#34;alist&amp;#34; xhofe/alist-aria2:latest 设置密码</description>
    </item>
    
    <item>
      <title>ChatGPT 提示工程</title>
      <link>https://cheneydev.github.io/posts/2023-10-21-chatgpt-%E6%8F%90%E7%A4%BA%E5%B7%A5%E7%A8%8B/</link>
      <pubDate>Mon, 23 Oct 2023 22:17:50 +0800</pubDate>
      
      <guid>https://cheneydev.github.io/posts/2023-10-21-chatgpt-%E6%8F%90%E7%A4%BA%E5%B7%A5%E7%A8%8B/</guid>
      <description>提示工程（Prompt Engineering）关注 Prompt 开发和优化，帮助用户更好的与大语言模型进行交互，引导 AI 生成更加符合预期的内容。
Prompt 实践 这里记录了我在使用 ChatGPT 过程中总结的还算不错的 Prompt 写法示例。
学习设计模式 请用易于理解的语言介绍“单例模式”，包含这些部分：“什么是单例模式”、“解决的问题”、“现实中的例子”、“Java 示例代码”、“适用场景”、“如何实现”、“优缺点”、“扩展内容”。</description>
    </item>
    
    <item>
      <title>设计模式学习笔记</title>
      <link>https://cheneydev.github.io/posts/2023-10-21-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 22 Oct 2023 22:28:22 +0800</pubDate>
      
      <guid>https://cheneydev.github.io/posts/2023-10-21-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>七大原则 设计模式中的七大原则是指的是一组指导性原则，它们帮助开发人员编写更可维护、可扩展、可重用和可理解的代码。这些原则有助于创建高质量的软件设计。
类别 原则名称 描述 创建类 单一职责原则 (Single Responsibility Principle ) 一个类应该只有一个引起变化的原因，即一个类应该只有一个单一的责任。 开放封闭原则 (Open/Closed Principle) 软件实体应该是开放于扩展的，但封闭于修改的，可以通过添加新功能来扩展系统，而不需要修改已存在的代码。 类关系 里氏替换原则 (Liskov Substitution Principle ) 子类必须能够替换其基类而不引起不良的行为，子类应该保持对基类的兼容性，不应该破坏父类的预期行为。 依赖倒置原则 (Dependency Inversion Principle) 高层模块不应该依赖于低层模块，二者都应该依赖于抽象/接口，抽象/接口不应该依赖于具体细节，具体细节应该依赖于抽象/接口。 接口隔离原则 (Interface Segregation Principle ) 客户端不应该被迫依赖于它们不使用的接口，接口应该被细分，使得客户端只需知道与其相关的接口。 组件复用 迪米特法则 (Law of Demeter) 每个单元应该只与其紧密相关的少数其他单元进行交互，减少模块之间的耦合性，使系统更加灵活和易于维护。 合成/聚合复用原则 (Composite/Aggregate Reuse Principle) 尽量使用合成/聚合关系来实现代码重用，而不是继承，降低类之间的耦合性，使系统更灵活。 常见设计模式 类别 模式名称 描述 行为型模式 观察者模式 (Observer Pattern) 定义了对象之间的一对多依赖关系，使得一个对象的状态发生变化时，其所有依赖对象都会得到通知并自动更新。 策略模式 (Strategy Pattern) 定义一系列算法，将每个算法封装成一个对象，并使它们可以相互替换。客户端可以在运行时选择所需的算法。 命令模式 (Command Pattern) 将请求或操作封装成一个对象，允许将请求参数化、队列化、撤销和重做操作。 模板方法模式 (Template Method Pattern) 定义一个算法的骨架，将一些步骤延迟到子类实现，以便在不改变算法结构的情况下重定义特定步骤。 结构型模式 适配器模式 (Adapter Pattern) 允许将一个类的接口转换成另一个类的接口，使不兼容的接口能够一起工作。 装饰器模式 (Decorator Pattern) 允许动态地将责任附加到对象，扩展对象的功能而不影响其他对象。 组合模式 (Composite Pattern) 允许将对象组合成树形结构以表示部分-整体层次结构。客户端可以统一处理单个对象和组合对象。 代理模式 (Proxy Pattern) 提供了一个代理对象，控制对另一个对象的访问，允许在访问实际对象前后执行额外的操作。 创建型模式 工厂方法模式 (Factory Method Pattern) 定义一个创建对象的接口，但将具体的实例化推迟到子类，以便子类决定要实例化的具体类。 抽象工厂模式 (Abstract Factory Pattern) 提供一个创建一系列相关或相互依赖对象的接口，而不需要指定它们的具体类。 单例模式 (Singleton Pattern) 保证一个类只有一个实例，并提供全局访问点。 建造者模式 (Builder Pattern) 将一个复杂对象的构建过程分离成多个步骤，允许相同的构建过程创建不同的表示。 原型模式 (Prototype Pattern) 允许通过复制现有对象来创建新对象，通常用于创建代价高昂的对象。 工厂 工厂方法模式 工厂模式是一种常见的设计模式，用于创建对象。它提供了一种方式来创建对象，而不需要在代码中直接使用构造函数，这有助于解耦代码，提高可维护性和可扩展性。</description>
    </item>
    
    <item>
      <title>MySQL 学习笔记</title>
      <link>https://cheneydev.github.io/posts/2023-10-14-mysql-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 14 Oct 2023 10:15:02 +0800</pubDate>
      
      <guid>https://cheneydev.github.io/posts/2023-10-14-mysql-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>事务 什么是事务 事务就是一组SQL语句，作为一个工作单元以原子方式进行处理。要么全部执行成功，要么全部执行失败。
事务四大特性 ACID 原子性（atomicity）
一个事务必须被视为一个不可分割的工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚。
一致性（consistency）
数据库总是从一个一致性状态转换到下一个一致性状态。如果事务最终没有提交，该事务所做的任何修改都不会被保存到数据库中。
隔离性（isolation）
一个事务所做的修改在最终提交以前，对其他事务是不可见的。
持久性（durability）
一旦提交，事务所做的修改就会被永久保存到数据库中。此时即使系统崩溃，数据也不会丢失。
事务的四个隔离级别 READ UNCOMMITTED（未提交读）
在事务中可以查看其他事务中还没有提交的修改。
READ COMMITTED（提交读）
大多数数据库系统的默认隔离级别是READ COMMITTED（但MySQL不是）。一个事务可以看到其他事务在它开始之后提交的修改，但在该事务提交之前，其所做的任何修改对其他事务都是不可见的。这个级别仍然允许不可重复读（nonrepeatable read），这意味着同一事务中两次执行相同语句，可能会看到不同的数据结果。
REPEATABLE READ（可重复读）
MySQL 的默认隔离级别，REPEATABLE READ解决了READ COMMITTED[7]级别的不可重复读问题，保证了在同一个事务中多次读取相同行数据的结果是一样的。但是理论上，可重复读隔离级别还是无法解决另外一个幻读（phantom read）的问题。
SERIALIZABLE（串行化）
该级别通过强制事务按序执行，使不同事务之间不可能产生冲突，从而解决了前面说的幻读问题。
死锁 死锁是指两个或多个事务相互持有和请求相同资源上的锁，产生了循环依赖。当多个事务试图以不同的顺序锁定资源时会导致死锁。当多个事务锁定相同的资源时，也可能会发生死锁。</description>
    </item>
    
    <item>
      <title>在 Spring Boot 项目的配置文件中安全存放敏感信息（密码）</title>
      <link>https://cheneydev.github.io/posts/2023-06-01-%E5%9C%A8springboot%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E5%AE%89%E5%85%A8%E5%AD%98%E6%94%BE%E5%AF%86%E7%A0%81/</link>
      <pubDate>Thu, 01 Jun 2023 10:50:08 +0800</pubDate>
      
      <guid>https://cheneydev.github.io/posts/2023-06-01-%E5%9C%A8springboot%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E5%AE%89%E5%85%A8%E5%AD%98%E6%94%BE%E5%AF%86%E7%A0%81/</guid>
      <description>实现在 Spring Boot 项目中安全地存储敏感信息，可以使用外部配置文件而不是将敏感信息明文存储在 application.yml 文件中。这样可以避免敏感信息被 Git 提交到网络上。
操作方法：
在 .gitignore 文件中添加 **/credentials.properties 来让版本控制工具忽略这个文件。
在 resources 文件夹下创建 credentials.properties，用来存储密码等敏感信息。
将敏感信息添加到credentials.properties文件中。例如：
password=your_password_here 在配置类上使用 @PropertySource 注解，指定加载刚才的文件。这样可以把文件的内容加载到 Spring Context 中。
在配置文件中使用（以配置 MySQL 数据源为例）：
spring: datasource: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://${mysql-host}:${mysql-port}/${mysql-database}?useSSL=false&amp;amp;serverTimezone=Asia/Shanghai&amp;amp;allowPublicKeyRetrieval=true username: ${mysql-username} password: ${mysql-password} </description>
    </item>
    
    <item>
      <title>如何使用 AI 孙燕姿歌手模型</title>
      <link>https://cheneydev.github.io/posts/2023-05-30-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8ai%E5%AD%99%E7%87%95%E5%A7%BF%E6%AD%8C%E6%89%8B%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Tue, 30 May 2023 21:40:40 +0800</pubDate>
      
      <guid>https://cheneydev.github.io/posts/2023-05-30-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8ai%E5%AD%99%E7%87%95%E5%A7%BF%E6%AD%8C%E6%89%8B%E6%A8%A1%E5%9E%8B/</guid>
      <description>实现 AI 孙燕姿主要借助 so-vits-svc 和别人基于此项目训练出来的孙燕姿声音模型。
项目中提供了 Colab 版本的代码，所以这里介绍如何在 Colab 中运行此项目并导入孙燕姿声音模型。
初始化模型 将 Colab 文件保存到自己的 Google Drive ，依次运行各个 Cell ，在 (Optional) Other Downloads (.zip) Step o.1 这一步导入孙燕姿模型。首先将下载好的孙燕姿模型上传到自己的 Google Drive （这里不提供链接），右键获取该文件的分享链接（所有人可见），输入到 Cell 的 model_url 里。然后运行下一个 Cell ，注意下一个 Cell 下面的重启运行时环境的提示，需要手动重启运行时环境，重启后不需要从头开始执行，接着运行下面的 Cell 即可。
处理音频文件 我们需要将目标歌曲的伴奏和人声分离，我使用的是 vocalremover.org 这个网站，将分离后的伴奏和人声分别下载保存。
注意，由于性能限制，我们需要把人声音频切分成 1 分钟左右的片段来交给模型处理，然后将输出音频合并成完整的歌曲人声部分。
人声文件是我们需要丢给模型处理的文件，当模型把人声替换成孙燕姿的声音之后，我们将它下载下来并与刚才的伴奏合并（我使用的是剪映在线版）。
生成孙燕姿音色歌曲 在 Colab 的文件目录中找到 raw 文件夹，将人声文件放进去。
点击运行下一个 Cell ，运行完毕后会出来如下表单：
参数这里建议像图里那样填写。
然后点击 convert 等待完成。
输出结果在 outputs 文件夹下，点击下载即可。</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://cheneydev.github.io/posts/hello-world/</link>
      <pubDate>Thu, 25 May 2023 10:49:08 +0800</pubDate>
      
      <guid>https://cheneydev.github.io/posts/hello-world/</guid>
      <description>Hello World!</description>
    </item>
    
  </channel>
</rss>
